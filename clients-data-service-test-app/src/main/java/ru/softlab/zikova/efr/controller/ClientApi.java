/*
 * clients-data-service-test
 * Тестовый API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.zikova.efr.controller;

import ru.softlab.zikova.efr.exchange.model.Client;
import ru.softlab.zikova.efr.exchange.model.PublicModelFormatter;
import org.springframework.core.annotation.Order;
import org.springframework.core.Ordered;
import ru.softlab.efr.infrastructure.logging.api.model.OperationLogEntry;
import ru.softlab.efr.infrastructure.logging.api.model.OperationMode;
import ru.softlab.efr.infrastructure.logging.api.model.OperationState;
import ru.softlab.efr.infrastructure.logging.api.services.OperationLogService;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.*;
import org.springframework.validation.*;
import org.springframework.data.web.*;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.*;
import javax.validation.constraints.*;
import javax.validation.*;

/**
 * Содержит эндпоинты приложения 'Тестовый API'
 */
@SuppressWarnings("all")
@RestController
public class ClientApi {
    public static final String DELETE_CLIENT_PATH = "/client/{id}";
    public static final String FIND_CLIENT_BY_ID_PATH = "/client/{id}";
    public static final String SAVE_CLIENT_PATH = "/client";
    public static final String UPDATE_CLIENT_PATH = "/client";

    private static final long LOG_TYPE_ID = 10;

    private final Delegate delegate;
    private final OperationLogService operationLogService;

    /**
     * Конструктор
     *
     * @param delegate эффективная реализации контроллера
     * @param operationLogService сервис логирования
     */
    public ClientApi(Delegate delegate, OperationLogService operationLogService) {
        this.delegate = delegate;
        this.operationLogService = operationLogService;
    }

    /**
     * Удаление данных клиента
     *
     * @param id Идентификатор клиента
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = DELETE_CLIENT_PATH,
            method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteClient(@PathVariable("id") Long id) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(DELETE_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Удаление данных клиента");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Идентификатор клиента", PublicModelFormatter.format(id));
        operationLogEntry.setSubjectId(PublicModelFormatter.format(id));
        try {
            ResponseEntity<Void> responseEntity = delegate.deleteClient(id);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Получение клиента по id
     *
     * @param id Идентификатор клиента
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = FIND_CLIENT_BY_ID_PATH,
            produces = { "application/json" }, 
            method = RequestMethod.GET)
    public ResponseEntity<Client> findClientById(@PathVariable("id") Long id) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(FIND_CLIENT_BY_ID_PATH);
        operationLogEntry.setOperationDescription("Получение клиента по id");
        operationLogEntry.setOperationMode(OperationMode.PASSIVE);
        operationLogEntry.setOperationParameter("Идентификатор клиента", PublicModelFormatter.format(id));
        operationLogEntry.setSubjectId(PublicModelFormatter.format(id));
        try {
            ResponseEntity<Client> responseEntity = delegate.findClientById(id);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Добавление клиента в БД
     *
     * @param product Данные клиента
     * @param bindingResult информация о валидности входящих данных
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = SAVE_CLIENT_PATH,
            method = RequestMethod.POST)
    public ResponseEntity<Client> saveClient(@Valid @RequestBody Client product, BindingResult bindingResult) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(SAVE_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Добавление клиента в БД");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Данные клиента", PublicModelFormatter.format(product));
        if (bindingResult.hasErrors()) {
            operationLogEntry.setOperationState(OperationState.CLIENT_ERROR);
            writeLog(operationLogEntry);
            throw new BindException(bindingResult);
        }
        try {
            ResponseEntity<Client> responseEntity = delegate.saveClient(product);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Обновление данных клиента
     *
     * @param client Данные клиента
     * @param bindingResult информация о валидности входящих данных
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = UPDATE_CLIENT_PATH,
            method = RequestMethod.PUT)
    public ResponseEntity<Client> updateClient(@Valid @RequestBody Client client, BindingResult bindingResult) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(UPDATE_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Обновление данных клиента");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Данные клиента", PublicModelFormatter.format(client));
        if (bindingResult.hasErrors()) {
            operationLogEntry.setOperationState(OperationState.CLIENT_ERROR);
            writeLog(operationLogEntry);
            throw new BindException(bindingResult);
        }
        try {
            ResponseEntity<Client> responseEntity = delegate.updateClient(client);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }


    private static OperationState getOperationState(ResponseEntity<?> stringResponseEntity) {
        if (stringResponseEntity.getStatusCode().is4xxClientError()) {
            return OperationState.CLIENT_ERROR;
        }
        if (stringResponseEntity.getStatusCode().is5xxServerError()) {
            return OperationState.SYSTEM_ERROR;
        }
        return OperationState.SUCCESS;
    }

    private void writeLog(OperationLogEntry operationLogEntry) {
        operationLogEntry.setDuration(Calendar.getInstance().getTimeInMillis() - operationLogEntry.getLogDate().getTimeInMillis());
        operationLogService.log(operationLogEntry);
    }

    /**
     * Интерфейс эффективной реализации контроллера
     */
    @Order(Ordered.HIGHEST_PRECEDENCE)
    @RestControllerAdvice(assignableTypes = ClientApi.class)
    public interface Delegate {
        /**
         * Удаление данных клиента
         *
         * @param id Идентификатор клиента 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Void> deleteClient(Long id) throws Exception;

        /**
         * Получение клиента по id
         *
         * @param id Идентификатор клиента 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> findClientById(Long id) throws Exception;

        /**
         * Добавление клиента в БД
         *
         * @param product Данные клиента 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> saveClient(Client product) throws Exception;

        /**
         * Обновление данных клиента
         *
         * @param client Данные клиента 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> updateClient(Client client) throws Exception;
    }
}
